package com.da.crypto.service;import org.bouncycastle.asn1.x500.X500Name;import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;import org.bouncycastle.cert.X509v3CertificateBuilder;import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;import org.bouncycastle.openssl.jcajce.JcaPEMWriter;import org.bouncycastle.operator.ContentSigner;import org.bouncycastle.operator.OperatorCreationException;import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;import org.springframework.stereotype.Service;import java.io.FileWriter;import java.io.IOException;import java.io.StringWriter;import java.math.BigInteger;import java.security.*;import java.security.cert.CertificateException;import java.security.cert.X509Certificate;import java.util.Date;@Service public class CertificateService {    public KeyPair generateKeyPair() throws NoSuchAlgorithmException, NoSuchProviderException {        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");        keyPairGenerator.initialize(2048);        return keyPairGenerator.generateKeyPair();    }    public X509Certificate generateX509Certificate(KeyPair keyPair) throws OperatorCreationException, CertificateException {        // Generate X509 certificate        X500Name issuer = new X500Name("CN=YOUR_NAME, OU=DEVELOPMENT, O=A_COMPANY, C=UK");        X500Name subject = issuer;        BigInteger serialNumber = BigInteger.valueOf(System.currentTimeMillis());        Date startDate = new Date(System.currentTimeMillis());        Date endDate = new Date(System.currentTimeMillis() + 365 * 24 * 60 * 60 * 1000); // 1 year validity        X509v3CertificateBuilder builder = new X509v3CertificateBuilder(issuer, serialNumber, startDate, endDate, subject, SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));        ContentSigner contentSigner = new JcaContentSignerBuilder("SHA256WithRSA").build(keyPair.getPrivate());        X509Certificate certificate = new JcaX509CertificateConverter().getCertificate(builder.build(contentSigner));        return  certificate;    }    public void printCertificate(X509Certificate certificate, PrivateKey privateKey) throws IOException {        StringWriter certWriter = new StringWriter();        JcaPEMWriter pemCertWriter = new JcaPEMWriter(certWriter);        pemCertWriter.writeObject(certificate);        pemCertWriter.close();        System.out.println("-----BEGIN CERTIFICATE-----");        System.out.println(certWriter);        System.out.println("-----END CERTIFICATE-----");        // Convert private key to PEM format        StringWriter privateKeyWriter = new StringWriter();        JcaPEMWriter pemPrivateWriter = new JcaPEMWriter(privateKeyWriter);        pemPrivateWriter.writeObject(privateKey);        pemPrivateWriter.close();        // Writing private key to a file        try (FileWriter privateKeyFileWriter = new FileWriter("private_key.pem")) {            privateKeyFileWriter.write(privateKeyWriter.toString());            privateKeyFileWriter.close();        } catch (IOException e) {            e.printStackTrace();        }        // Writing certificate to a file        try (FileWriter certFileWriter = new FileWriter("certificate.pem")) {            certFileWriter.write("-----BEGIN CERTIFICATE-----\n");            certFileWriter.write(certWriter.toString());            certFileWriter.write("\n-----END CERTIFICATE-----\n");            certFileWriter.close();        } catch (IOException e) {            e.printStackTrace();        }    }}